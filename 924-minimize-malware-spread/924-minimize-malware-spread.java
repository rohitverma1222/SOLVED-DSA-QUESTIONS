class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n=graph.length;
        int m=graph[0].length;
        parent=new int[n];
        rank=new int[n];
        size=new int[n];

        for(int i=0;i<n;i++)
        {
            parent[i]=i;
            rank[i]=0;
            size[i]=1;
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i!=j && graph[i][j]==1)
                {
                    union(i,j);
                }
            }
        }
        
        int mal[]=new int[n];
        for(int v:initial)
        {
            int lead=find(v);
            mal[lead]++;
        }

        Arrays.sort(initial);
        int ans=initial[0];
        int c=0;
        int min_malware=0;
        for(int v:initial)
        {
            int lead=find(v);
            if(mal[lead]==1)
            {
                if(size[lead]>c)
                {
                    ans=v;
                    c=size[lead];
                }
            }
        }
        return ans;
    }
    int []parent;
    int []rank;
    int size[];
    public int find(int x)
    {
        if(parent[x]==x)
            return x;
        int st=find(parent[x]);
        parent[x]=st;
        return st;
    }
    
    public void union(int u,int v)
    {
        int slu=find(u);
        int slv=find(v);
        if(slu!=slv)
        {
            int rankU=rank[slu];
            int rankV=rank[slv];

            if(rankU<rankV)
            {
                parent[slu]=slv;
                size[slv]++;
            }
            else if(rankV<rankU)
            {
                parent[slv]=slu;
                size[slu]++;

            }
            else{
                parent[slu]=slv;
                rank[slv]++;
                size[slv]++;
            }
        }
        

    }
}